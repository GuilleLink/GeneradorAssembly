.global _start

OutputInt:
        sub     sp, sp, #4
        ldr     r1, =0xFF201000
        add     r0, r0, #48
        str     r0, [r1]
        add     sp, sp, #4
        bx      lr

InputInt:
        sub     sp, sp, #0
        ldr     r0, =0xFF200050
        ldr     r0, [r0]
        add     sp, sp, #0
        bx      lr

factorial:
        push    {r11,lr}
        mov     r11, sp
        sub     sp, sp, #4
        str     r0, [sp, #0]
        ldr     r0, [sp, #0]
        mov     r1, #0
        cmp     r0, r1
        beq     IF_TRUE_0
        b       IF_FALSE_0
IF_TRUE_0:
        mov     r0, #1
        b       END_IF_0
IF_FALSE_0:
        ldr     r0, [sp, #0]
        mov     r1, #1
        sub     r2, r0, r1
        mov     r0, r2
        bl      factorial
        ldr     r1, [sp, #0]
        mul     r2, r1, r0
        mov     r0, r2
END_IF_0:
        mov     sp, r11
        pop     {r11, lr}
        bx      lr
_start:
        push    {r11, lr}
        mov     r11, sp
        sub     sp, sp, #4
        bl      InputInt
        str     r0, [sp, #0]
        ldr     r0, [sp, #0]
        bl      factorial
        str     r0, [sp, #0]
        ldr     r0, [sp, #0]
        bl      OutputInt
        mov     sp, r11
        pop     {r11, lr}
        bx      lr